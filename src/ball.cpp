#include"ball.h"

using namespace akgl;
// в конструкторе от объекта нам достается рандомный цвет и начальная позиция
// кроме этого задаем начальное направление (рандомный dir), заполняем поле с радиусом величиной из того что мы передали в конструктор R=R0
// напечатаем цвет шарика и начальное положениие (не обязательно)
ball::ball(double R0) : object(), dir(vec::Rnd1())
{
    pos = vec::Rnd1();
    R = R0;
    col.print();
    pos.print();
}
// отрисовка - взяли наш цвет переместились на нашу позицию и нарисовали шарик, 20, 20 это по сути четкость шарика 20 нормально(ну количество параллелей и мередианов)
// пуш и поп это чтобы все остальное осталось прежним
void ball::Render(anim &Ani)
{
    glPushMatrix();
    glColor3d(col.x, col.y, col.z);
    glTranslated(pos.x, pos.y, pos.z);
    glutSolidSphere(R, 20, 20);
    glPopMatrix();
}
// перемещаю шарик меняя позицию на вектор dir
void ball::Response(anim &Ani)
{
    pos += dir * 0.1;
    // если наш шарик вылетает за пределы кубика по какой либо оси то меняю по этой оси направление на обратное(упругий удар)
    if ((pos.x < -7) || (pos.x > 7))
        dir.x = -dir.x;
    if ((pos.y < -7) || (pos.y > 7))
        dir.y = -dir.y;
    if ((pos.z < -7) || (pos.z > 7))
        dir.z = -dir.z;

}